// Generated by gencpp from file command_handle/Info.msg
// DO NOT EDIT!


#ifndef COMMAND_HANDLE_MESSAGE_INFO_H
#define COMMAND_HANDLE_MESSAGE_INFO_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace command_handle
{
template <class ContainerAllocator>
struct Info_
{
  typedef Info_<ContainerAllocator> Type;

  Info_()
    : header()
    , mode(0)
    , speed(0)
    , gear(0)
    , lb(0)
    , hb(0)
    , hnk(0)
    , rotate(0)
    , rearview(0)
    , acc_p(0)
    , clu_p(0)
    , brk_p(0)  {
    }
  Info_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , mode(0)
    , speed(0)
    , gear(0)
    , lb(0)
    , hb(0)
    , hnk(0)
    , rotate(0)
    , rearview(0)
    , acc_p(0)
    , clu_p(0)
    , brk_p(0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef int16_t _mode_type;
  _mode_type mode;

   typedef int16_t _speed_type;
  _speed_type speed;

   typedef int16_t _gear_type;
  _gear_type gear;

   typedef int16_t _lb_type;
  _lb_type lb;

   typedef int16_t _hb_type;
  _hb_type hb;

   typedef int16_t _hnk_type;
  _hnk_type hnk;

   typedef int16_t _rotate_type;
  _rotate_type rotate;

   typedef int16_t _rearview_type;
  _rearview_type rearview;

   typedef int16_t _acc_p_type;
  _acc_p_type acc_p;

   typedef int16_t _clu_p_type;
  _clu_p_type clu_p;

   typedef int16_t _brk_p_type;
  _brk_p_type brk_p;





  typedef boost::shared_ptr< ::command_handle::Info_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::command_handle::Info_<ContainerAllocator> const> ConstPtr;

}; // struct Info_

typedef ::command_handle::Info_<std::allocator<void> > Info;

typedef boost::shared_ptr< ::command_handle::Info > InfoPtr;
typedef boost::shared_ptr< ::command_handle::Info const> InfoConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::command_handle::Info_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::command_handle::Info_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::command_handle::Info_<ContainerAllocator1> & lhs, const ::command_handle::Info_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.mode == rhs.mode &&
    lhs.speed == rhs.speed &&
    lhs.gear == rhs.gear &&
    lhs.lb == rhs.lb &&
    lhs.hb == rhs.hb &&
    lhs.hnk == rhs.hnk &&
    lhs.rotate == rhs.rotate &&
    lhs.rearview == rhs.rearview &&
    lhs.acc_p == rhs.acc_p &&
    lhs.clu_p == rhs.clu_p &&
    lhs.brk_p == rhs.brk_p;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::command_handle::Info_<ContainerAllocator1> & lhs, const ::command_handle::Info_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace command_handle

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::command_handle::Info_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::command_handle::Info_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::command_handle::Info_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::command_handle::Info_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::command_handle::Info_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::command_handle::Info_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::command_handle::Info_<ContainerAllocator> >
{
  static const char* value()
  {
    return "2ae84e5fb4747e05b67e7c377e5c6576";
  }

  static const char* value(const ::command_handle::Info_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x2ae84e5fb4747e05ULL;
  static const uint64_t static_value2 = 0xb67e7c377e5c6576ULL;
};

template<class ContainerAllocator>
struct DataType< ::command_handle::Info_<ContainerAllocator> >
{
  static const char* value()
  {
    return "command_handle/Info";
  }

  static const char* value(const ::command_handle::Info_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::command_handle::Info_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"int16 mode\n"
"int16 speed\n"
"int16 gear\n"
"int16 lb\n"
"int16 hb\n"
"int16 hnk\n"
"int16 rotate\n"
"int16 rearview\n"
"int16 acc_p\n"
"int16 clu_p\n"
"int16 brk_p\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::command_handle::Info_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::command_handle::Info_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.mode);
      stream.next(m.speed);
      stream.next(m.gear);
      stream.next(m.lb);
      stream.next(m.hb);
      stream.next(m.hnk);
      stream.next(m.rotate);
      stream.next(m.rearview);
      stream.next(m.acc_p);
      stream.next(m.clu_p);
      stream.next(m.brk_p);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Info_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::command_handle::Info_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::command_handle::Info_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "mode: ";
    Printer<int16_t>::stream(s, indent + "  ", v.mode);
    s << indent << "speed: ";
    Printer<int16_t>::stream(s, indent + "  ", v.speed);
    s << indent << "gear: ";
    Printer<int16_t>::stream(s, indent + "  ", v.gear);
    s << indent << "lb: ";
    Printer<int16_t>::stream(s, indent + "  ", v.lb);
    s << indent << "hb: ";
    Printer<int16_t>::stream(s, indent + "  ", v.hb);
    s << indent << "hnk: ";
    Printer<int16_t>::stream(s, indent + "  ", v.hnk);
    s << indent << "rotate: ";
    Printer<int16_t>::stream(s, indent + "  ", v.rotate);
    s << indent << "rearview: ";
    Printer<int16_t>::stream(s, indent + "  ", v.rearview);
    s << indent << "acc_p: ";
    Printer<int16_t>::stream(s, indent + "  ", v.acc_p);
    s << indent << "clu_p: ";
    Printer<int16_t>::stream(s, indent + "  ", v.clu_p);
    s << indent << "brk_p: ";
    Printer<int16_t>::stream(s, indent + "  ", v.brk_p);
  }
};

} // namespace message_operations
} // namespace ros

#endif // COMMAND_HANDLE_MESSAGE_INFO_H
